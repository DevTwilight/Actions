name: Auto Changelog
description: Generates a changelog from commit messages

inputs:
  repo:
    description: 'Target repository (Repo B)'
    required: true
  commit_message:
    description: 'Commit message pattern for version bumps (e.g., "Bump version to ")'
    required: true
  sections:
    description: 'Mapping of commit keywords to changelog section titles (e.g., "Feat: New features")'
    required: true
  file:
    description: 'Path to changelog file to write/update (e.g., Devlog.md)'
    required: true
  token:
    description: 'GitHub token with write access to Repo B'
    required: true
  title:
    description: 'Title for the changelog version block (e.g., "## Version 1.2.3")'
    required: true

outputs:
  version:
    description: 'The detected version from the changelog'

runs:
  using: "composite"
  steps:
    - name: Generate Changelog
      id: set-version
      shell: pwsh
      env:
        REPO: ${{ github.repository }}
      run: |
        $sourceRepoUrl = "https://github.com/${{ github.repository }}"
        $targetRepoUrl = "https://github.com/${{ inputs.repo }}"

        $commitMessagePattern = "${{ inputs.commit_message }}"
        $sectionsInput = "${{ inputs.sections }}"
        $filePath = "${{ inputs.file }}"
        $versionTitle = "${{ inputs.title }}"

        # Parse sections input into hashtable
        $sections = @{}
        $sectionsInput -split "`n" | ForEach-Object {
          $_ = $_.Trim()
          if ($_ -and ($_ -match "^.+:.+$")) {
            $key, $value = $_ -split ":", 2
            $sections[$key.Trim()] = $value.Trim()
          }
        }

        if ($sections.Count -eq 0) {
          Write-Error "No valid sections found in input."
          exit 1
        }

        Write-Host "Fetching commit history..."
        $log = git log --pretty=format:"%H|%s"
        $commits = $log -split "`n" | ForEach-Object {
          $parts = $_ -split "\|", 2
          [PSCustomObject]@{ Hash = $parts[0]; Message = $parts[1] }
        }

        # Match version bump commits
        $pattern = [regex]::Escape($commitMessagePattern) + '\s*\d+\.\d+(?:\.\d+)?(?:-[\w\d]+)?'
        $versionBumps = $commits | Where-Object { $_.Message -match "^$pattern$" }

        if ($versionBumps.Count -eq 0) {
          Write-Warning "No version bump commits found with pattern '$commitMessagePattern'."
          exit 1
        }

        $currentBump = $versionBumps[0]
        $versionMatch = [regex]::Match($currentBump.Message, '\d+\.\d+(?:\.\d+)?(?:-[\w\d]+)?')
        $version = $versionMatch.Value
        echo "version=$version" >> $env:GITHUB_OUTPUT

        Write-Host "Detected version bump: $version"

        # Determine commit range
        $startIndex = $commits.IndexOf($currentBump)
        $endIndex = if ($versionBumps.Count -ge 2) {
          $commits.IndexOf($versionBumps[1])
        } else {
          $commits.Count
        }

        if ($startIndex -lt $endIndex) {
          $rangeCommits = $commits[($startIndex + 1)..($endIndex - 1)]
        } else {
          $rangeCommits = $commits[($endIndex + 1)..($startIndex - 1)]
        }

        $entries = @{}
        $seenMessages = @{}

        foreach ($commit in $rangeCommits) {
          foreach ($keyword in $sections.Keys) {
            $pattern = "^$keyword\s*:\s*(.+)$"
            if ($commit.Message -match $pattern) {
              $clean = $matches[1].Trim()
              if (-not $seenMessages.ContainsKey($clean)) {
                $seenMessages[$clean] = $true

                # Convert PR and issue references
                $clean = $clean -replace "(?i)\bPR #(\d+)\b", "[PR #`$1]($sourceRepoUrl/pull/`$1)"
                $clean = $clean -replace "(?<!PR )#(\d+)", "[#`$1]($sourceRepoUrl/issues/`$1)"

                if (-not $entries.ContainsKey($keyword)) {
                  $entries[$keyword] = @()
                }
                $entries[$keyword] += "- $clean"
              }
              break
            }
          }
        }

        if ($entries.Count -eq 0) {
          Write-Warning "No matching commit messages found for changelog."
          exit 1
        }

        # Construct changelog block
        $newBlock = @()
        $newBlock += $versionTitle
        $newBlock += ""

        foreach ($keyword in $sections.Keys) {
          if ($entries.ContainsKey($keyword)) {
            $newBlock += "### $($sections[$keyword])"
            $newBlock += ""
            $newBlock += $entries[$keyword]
            $newBlock += ""
          }
        }

        # Ensure file directory exists
        $fileDir = Split-Path -Path $filePath -Parent
        if (-not (Test-Path $fileDir)) {
          New-Item -ItemType Directory -Path $fileDir | Out-Null
        }

        # Write changelog block to file
        $newBlock | Set-Content -Path $filePath -Encoding UTF8
        Write-Host "Changelog written to $filePath"
