name: 'Auto Changelog'
description: 'Generates a changelog from commit messages for the current version bump'

inputs:
  commit_message:
    description: 'Commit message pattern for version bumps (e.g., "Bump version to")'
    required: true
  sections:
    description: 'Mapping of commit keywords to changelog section titles (e.g., "Feat: New features")'
    required: true
  file:
    description: 'Path to changelog file to write/update (e.g., Notes/change.md)'
    required: true
  token:
    description: 'GitHub token with write access to the repository'
    required: true
  title:
    description: 'Title prefix for the changelog version block (e.g., "Test Action")'
    required: true

runs:
  using: "composite"
  steps:
    - name: Generate Changelog
      shell: pwsh
      env:
        REPO: ${{ github.repository }}
      run: |
        $repoUrl = "https://github.com/${{ github.repository }}"
        $commitMessagePattern = "${{ inputs.commit_message }}"
        $sectionsInput = "${{ inputs.sections }}"
        $filePath = "${{ inputs.file }}"
        $titlePrefix = "${{ inputs.title }}".Trim()

        # Parse sections
        $sections = @{}
        $sectionsInput -split "`n" | ForEach-Object {
            $_ = $_.Trim()
            if ($_ -and ($_ -match "^.+:.+$")) {
                $key, $value = $_ -split ":", 2
                $sections[$key.Trim()] = $value.Trim()
            }
        }

        if ($sections.Count -eq 0) {
            Write-Error "No valid sections found in input."
            exit 1
        }

        # Get commits in chronological order
        $log = git log --reverse --pretty=format:"%H|%s"
        $commits = $log -split "`n" | ForEach-Object {
            $parts = $_ -split "\|", 2
            [PSCustomObject]@{ Hash = $parts[0]; Message = $parts[1].Trim() }
        }

        # Extract version bump
        $versionRegex = '\d+\.\d+(?:\.\d+)?(?:-[\w\d]+)?'
        $bumpPattern = [regex]::Escape($commitMessagePattern.Trim()) + '\s*' + $versionRegex + '\s*$'
        $versionBumps = $commits | Where-Object { $_.Message -match "^$bumpPattern" }

        if ($versionBumps.Count -eq 0) {
            Write-Warning "No version bump commits found matching '$commitMessagePattern'"
            exit 0
        }

        # Use the most recent version bump
        $currentBump = $versionBumps[-1]
        $version = ([regex]::Match($currentBump.Message, $versionRegex)).Value

        # Check for previous bumps of the same version (exclude the current one)
        $duplicateBumps = $versionBumps | Where-Object {
            $_.Hash -ne $currentBump.Hash -and
            ([regex]::Match($_.Message, $versionRegex)).Value -eq $version
        }

        if ($duplicateBumps.Count -gt 0) {
            Write-Warning "Version $version has already been bumped before. Skipping changelog."
            exit 0
        }

        # Build changelog title
        $versionTitle = "## $titlePrefix $version"

        # Check if changelog file already contains this title
        if (Test-Path $filePath) {
            $changelogContent = Get-Content $filePath
            if ($changelogContent | Where-Object { $_ -eq $versionTitle }) {
                Write-Warning "Changelog for version $version already exists in file. Skipping."
                exit 0
            }
        }

        # Get commits after current bump
        $startIndex = $commits.IndexOf($currentBump)
        if ($startIndex -ge ($commits.Count - 1)) {
            Write-Warning "No commits found after version bump."
            exit 0
        }

        $rangeCommits = $commits[($startIndex + 1)..($commits.Count - 1)]

        # Group entries by section
        $entries = @{}
        $seen = @{}
        foreach ($section in $sections.Keys) {
            $entries[$section] = @()
        }

        foreach ($commit in $rangeCommits) {
            foreach ($keyword in $sections.Keys) {
                if ($commit.Message -match "^$keyword\s*:\s*(.+)$") {
                    $msg = $matches[1].Trim()
                    if (-not $seen.ContainsKey($msg)) {
                        $seen[$msg] = $true
                        $msg = $msg -replace "(?i)\bPR #(\d+)\b", "[PR #$1]($repoUrl/pull/$1)"
                        $msg = $msg -replace "(?<!\[)#[0-9]+\b", { param($m) "[#$($m.Value.Substring(1))]($repoUrl/issues/$($m.Value.Substring(1)))" }
                        $entries[$keyword] += "- $msg"
                    }
                    break
                }
            }
        }

        $totalEntries = ($entries.Values | ForEach-Object { $_.Count } | Measure-Object -Sum).Sum
        if ($totalEntries -eq 0) {
            Write-Warning "No changelog entries matched section keywords after version bump."
            exit 0
        }

        # Construct changelog block
        $block = @()
        $block += $versionTitle
        $block += ""

        foreach ($keyword in $sections.Keys) {
            if ($entries[$keyword].Count -gt 0) {
                $block += "### $($sections[$keyword])"
                $block += ""
                $block += $entries[$keyword]
                $block += ""
            }
        }

        # Ensure changelog directory exists
        $dir = Split-Path -Parent $filePath
        if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
        }

        # Append to changelog
        Add-Content -Path $filePath -Value ($block -join "`n")
        Write-Information "Changelog updated in $filePath" -InformationAction Continue
