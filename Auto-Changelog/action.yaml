name: Auto Changelog

inputs:
  repo:
    required: true
  commit_message:
    required: true
  sections:
    required: true
  file:
    required: true
  token:
    required: true
  title:
    required: true

outputs:
  version:
    value: ${{ steps.set-version.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Generate Changelog
      id: set-version
      shell: pwsh
      env:
        REPO: ${{ github.repository }}
      run: |
        $sourceRepoUrl = "https://github.com/${{ github.repository }}"
        $targetRepoUrl = "https://github.com/${{ inputs.repo }}"

        $commitMessagePattern = "${{ inputs.commit_message }}"
        $sectionsInput = @"
${{ inputs.sections }}
"@
        $filePath = "${{ inputs.file }}"
        $versionTitle = "${{ inputs.title }}"

        # Parse sections input
        $sections = @{}
        $lines = $sectionsInput -split "`r?`n"
        foreach ($line in $lines) {
          if (-not $line.Trim()) { continue }
          $sectionParts = $line.Trim() -split ":", 2
          if ($sectionParts.Count -eq 2) {
            $sections[$sectionParts[0].Trim()] = $sectionParts[1].Trim()
          } else {
            Write-Error "Invalid section format: $line"
            exit 1
          }
        }

        foreach ($keyword in $sections.Keys) {
          if (-not $sections[$keyword]) {
            Write-Warning "No section heading provided for keyword '$keyword'."
            exit 1
          }
        }

        # Fetch commit history from Repo A
        Write-Host "Fetching commit history from source repository ($sourceRepoUrl)..."
        $log = git log --pretty=format:"%H|%s"
        $commits = $log -split "`n" | ForEach-Object {
          $parts = $_ -split "\|", 2
          [PSCustomObject]@{ Hash = $parts[0]; Message = $parts[1] }
        }

        # Find version bump commits
        $pattern = [regex]::Escape($commitMessagePattern) + '\d+\.\d+(?:\.\d+)?(?:-dev)?'
        $versionBumps = $commits | Where-Object { $_.Message -match "^$pattern$" }

        if ($versionBumps.Count -eq 0) {
          Write-Warning "No version bump commit found using message '$commitMessagePattern'. Cannot generate changelog."
          exit 1
        }

        $currentBump = $versionBumps[0]
        $versionMatch = [regex]::Match($currentBump.Message, '\d+\.\d+(?:\.\d+)?(?:-dev)?')
        $version = $versionMatch.Value

        Write-Information "Detected version bump: $version"
        echo "version=$version" >> $env:GITHUB_OUTPUT

        $startIndex = $commits.IndexOf($currentBump)
        $rangeCommits = $commits[($startIndex + 1)..($commits.Count - 1)]

        $entriesBySection = @{}
        foreach ($key in $sections.Keys) { $entriesBySection[$key] = @() }

        $seenMessages = @{}
        foreach ($commit in $rangeCommits) {
          foreach ($keyword in $sections.Keys) {
            $pattern = "^$keyword\s*:\s*(.+)$"
            if ($commit.Message -match $pattern) {
              $clean = $matches[1].Trim()
              if ($seenMessages.ContainsKey($clean)) { continue }
              $seenMessages[$clean] = $true

              $clean = $clean -replace "PR #(\d+)", "[PR #`$1]($sourceRepoUrl/pull/`$1)"
              $clean = $clean -replace "#(\d+)", "[#`$1]($sourceRepoUrl/issues/`$1)"
              $entriesBySection[$keyword] += "- $clean"
              break
            }
          }
        }

        $hasEntries = $false
        foreach ($section in $entriesBySection.Values) {
          if ($section.Count -gt 0) {
            $hasEntries = $true
            break
          }
        }

        if (-not $hasEntries) {
          Write-Warning "No commits found matching the defined sections and commit messages."
          exit 1
        }

        # Generate new changelog content
        $newBlock = @()
        $newBlock += $versionTitle
        $newBlock += ""

        foreach ($keyword in $sections.Keys) {
          $sectionTitle = $sections[$keyword]
          $entries = $entriesBySection[$keyword]
          if ($entries.Count -gt 0) {
            $newBlock += "### $sectionTitle"
            $newBlock += ""
            $newBlock += $entries
            $newBlock += ""
          }
        }

        $fileDir = Split-Path -Path $filePath -Parent
        if (-not (Test-Path $fileDir)) {
          Write-Information "Creating directory for changelog file: $fileDir"
          New-Item -ItemType Directory -Path $fileDir -Force | Out-Null
        }

        $newBlock | Set-Content -Path $filePath -Encoding UTF8
        Write-Host "Changelog file created/updated successfully at $filePath"
