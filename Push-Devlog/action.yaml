name: Push-Devlog

inputs:
  keywords:
    required: true
  section:
    required: false
  file:
    required: true

outputs:
  version:
    value: ${{ steps.set-version.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate Devlog
      id: set-version
      shell: pwsh
      run: |
        $keywordsInput = "${{ inputs.keywords }}"
        $sectionInput = "${{ inputs.section }}"
        $fileName = "${{ inputs.file }}"

        $keywords = $keywordsInput -split "`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
        $sectionMap = @{}

        if ($sectionInput -ne "") {
            Write-Host "Creating custom sections..."
            foreach ($line in $sectionInput -split "`n") {
                if ($line -match "^(.*?):(.*)$") {
                    $sectionMap[$matches[1].Trim()] = $matches[2].Trim()
                }
            }
        }

        Write-Host "Fetching commit history..."
        $log = git log --pretty=format:"%H|%s"
        $commits = $log -split "`n" | ForEach-Object {
            $parts = $_ -split "\|", 2
            [PSCustomObject]@{ Hash = $parts[0]; Message = $parts[1] }
        }

        Write-Host "Detecting version bump commits..."
        $versionBumps = $commits | Where-Object {
            $_.Message -match '^Bump version to \d+\.\d+(?:\.\d+)?(?:-dev)?$'
        }

        if ($versionBumps.Count -eq 0) {
            Write-Warning "No version bump commit found. Cannot generate Devlog."
            exit 1
        }

        $currentBump = $versionBumps[0]
        $versionMatch = [regex]::Match($currentBump.Message, '\d+\.\d+(?:\.\d+)?(?:-dev)?')
        $version = $versionMatch.Value

        Write-Host "Version extracted."

        echo "version=$version" >> $env:GITHUB_OUTPUT

        $startIndex = $commits.IndexOf($currentBump)
        $endIndex = if ($versionBumps.Count -ge 2) {
            $commits.IndexOf($versionBumps[1])
        } else {
            $commits.Count
        }

        $rangeCommits = $commits[($startIndex + 1) .. ($endIndex - 1)]
        $sections = @{}

        foreach ($commit in $rangeCommits) {
            foreach ($keyword in $keywords) {
                $pattern = "^$keyword\s*:\s*(.+)$"
                if ($commit.Message -match $pattern) {
                    $clean = $matches[1].Trim()
                    $heading = if ($sectionMap.ContainsKey($keyword)) { $sectionMap[$keyword] } else { $keyword }
                    if (-not $sections.ContainsKey($heading)) {
                        $sections[$heading] = @()
                    }
                    $sections[$heading] += "- $clean"
                    break
                }
            }
        }

        Write-Host "Creating Devlog file: $fileName"
        $lines = @()
        
        if ($sections.Count -eq 0) {
            Write-Warning "No qualifying commits found for this version."
        } else {
            foreach ($heading in $sections.Keys) {
                $lines += "## $heading"
                $lines += $sections[$heading]
                $lines += ""
            }
        }

        $lines | Set-Content -Path $fileName -Encoding UTF8
        Write-Host "Devlog file created successfully: $fileName"
