name: Push-Devlog

inputs:
  keywords:
    required: true
  commit_message:
    required: true

outputs:
  version:
    value: ${{ steps.set-version.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Generate Devlog
      id: set-version
      shell: pwsh
      env:
        REPO: ${{ github.repository }}
      run: |
        $repo = $env:REPO
        $repoUrl = "https://github.com/$repo"
        $fileName = "Devlog.md"

        $keywordsInput = "${{ inputs.keywords }}"
        $versionBumpMessage = "${{ inputs.commit_message }}"

        $keywords = $keywordsInput -split "`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
        $entries = @()
        $seenMessages = @{}

        Write-Host "Fetching commit history..."
        $log = git log --pretty=format:"%H|%s"
        $commits = $log -split "`n" | ForEach-Object {
            $parts = $_ -split "\|", 2
            [PSCustomObject]@{ Hash = $parts[0]; Message = $parts[1] }
        }

        Write-Host "Searching for version bump commits with message '$versionBumpMessage'..."
        $pattern = [regex]::Escape($versionBumpMessage) + '\d+\.\d+(?:\.\d+)?(?:-dev)?'

        $versionBumps = $commits | Where-Object {
            $_.Message -match "^$pattern$"
        }

        if ($versionBumps.Count -eq 0) {
            Write-Warning "No version bump commit found using message '$versionBumpMessage'. Cannot generate Devlog."
            exit 1
        }

        $currentBump = $versionBumps[0]
        $versionMatch = [regex]::Match($currentBump.Message, '\d+\.\d+(?:\.\d+)?(?:-dev)?')
        $version = $versionMatch.Value

        # Check for duplicate version bump earlier in history
        $duplicate = $versionBumps | Where-Object {
            $_.Message -eq "$versionBumpMessage$version" -and $_.Hash -ne $currentBump.Hash
        }

        if ($duplicate.Count -gt 0) {
            Write-Warning "Duplicate version bump found for version $version. Skipping Devlog generation."
            exit 0
        }

        Write-Host "Version extracted."
        echo "version=$version" >> $env:GITHUB_OUTPUT

        $startIndex = $commits.IndexOf($currentBump)
        $endIndex = if ($versionBumps.Count -ge 2) {
            $commits.IndexOf($versionBumps[1])
        } else {
            $commits.Count
        }

        $rangeCommits = $commits[($startIndex + 1) .. ($endIndex - 1)]

        foreach ($commit in $rangeCommits) {
            foreach ($keyword in $keywords) {
                $pattern = "^$keyword\s*:\s*(.+)$"
                if ($commit.Message -match $pattern) {
                    $clean = $matches[1].Trim()

                    # Skip duplicates
                    if ($seenMessages.ContainsKey($clean)) {
                        continue
                    }
                    $seenMessages[$clean] = $true

                    # Link conversion
                    $clean = $clean -replace "PR #(\d+)", "[PR #`$1]($repoUrl/pull/`$1)"
                    $clean = $clean -replace "#(\d+)", "[#`$1]($repoUrl/issues/`$1)"

                    $entries += "- $clean"
                    break
                }
            }
        }

        Write-Host "Creating Devlog file: $fileName"
        $entries | Set-Content -Path $fileName -Encoding UTF8
        Write-Host "Devlog file created successfully: $fileName"