name: Push-Devlog

description: |
  Composite GitHub Action that generates release notes from commit messages
  and writes them to a custom markdown file based on version bump commits.

inputs:
  prefix:
    description: |
      List of commit message prefixes to include (one per line).
      For example: added, fixed, improved.
    required: true

  section:
    description: |
      Optional mapping of prefix to section heading. Format: prefix:Section Heading
      For example: added:New Features, fixed:Bug Fixes.
    required: false

  file:
    description: |
      Name of the output file to write the release notes (e.g., Devlog.md).
    required: true

outputs:
  version:
    description: "Extracted version number from the version bump commit (e.g., 1.2.3 or 1.2.3-dev)."

runs:
  using: "composite"
  steps:
    - name: "Generate release notes and write to file"
      id: generate
      shell: pwsh
      run: |
        Write-Host "[INFO] Starting release notes generation..."

        $prefixInput = "${{ inputs.prefix }}"
        $sectionInput = "${{ inputs.section }}"
        $fileName = "${{ inputs.file }}"

        # Split prefixes and filter empty entries
        $prefixes = $prefixInput -split "`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
        $sectionMap = @{}

        # Handle section mappings
        if ($sectionInput -ne "") {
            Write-Host "[INFO] Creating sections..."
            foreach ($line in $sectionInput -split "`n") {
                if ($line -match "^(.*?):(.*)$") {
                    $sectionMap[$matches[1].Trim()] = $matches[2].Trim()
                }
            }
        }

        # Extract commit log
        Write-Host "[INFO] Extracting commit history..."
        $log = git log --pretty=format:"%H|%s"
        $commits = $log -split "`n" | ForEach-Object {
            $parts = $_ -split "\|", 2
            [PSCustomObject]@{ Hash = $parts[0]; Message = $parts[1] }
        }

        # Identify version bump commits
        Write-Host "[INFO] Checking for version bumps..."
        $versionBumps = $commits | Where-Object { $_.Message -match '^Bump version to \d+\.\d+\.\d+(-dev)?$' }

        if ($versionBumps.Count -eq 0) {
            Write-Warning "[WARNING] No version bump commit found. Cannot generate Devlog."
            exit 1
        }

        # If there is at least one bump commit, process the commits
        $currentBump = $versionBumps[0]
        $versionMatch = [regex]::Match($currentBump.Message, '\d+\.\d+\.\d+(-dev)?')
        $version = $versionMatch.Value
        echo "::set-output name=version::$version"
        Write-Host "[INFO] Found version bump: $version"

        # Start the range of commits from the latest bump to the first commit
        $startIndex = 0
        $endIndex = $commits.Count - 1

        # Process commits from the start (if there's no second bump)
        $rangeCommits = $commits[$startIndex .. $endIndex]

        # Initialize sections for organizing release notes
        $sections = @{}

        # Loop through the commits and categorize by prefix
        foreach ($commit in $rangeCommits) {
            foreach ($prefix in $prefixes) {
                if ($commit.Message.ToLower().StartsWith($prefix.ToLower())) {
                    $clean = $commit.Message.Substring($prefix.Length).Trim()
                    $heading = if ($sectionMap.ContainsKey($prefix)) { $sectionMap[$prefix] } else { $prefix }
                    if (-not $sections.ContainsKey($heading)) {
                        $sections[$heading] = @()
                    }
                    $sections[$heading] += "- $clean"
                    break
                }
            }
        }

        # Creating Devlog file
        Write-Host "[INFO] Creating Devlog file: $fileName"
        $lines = @()
        $lines += "# Devlog - Version $version"
        $lines += ""

        # If no qualifying commits, write a warning in the console
        if ($sections.Count -eq 0) {
            Write-Warning "[WARNING] No qualifying commits found for this version."
        } else {
            foreach ($heading in $sections.Keys) {
                $lines += "## $heading"
                $lines += $sections[$heading]
                $lines += ""
            }
        }

        $lines | Set-Content -Path $fileName -Encoding UTF8
        Write-Host "[INFO] Devlog file created successfully: $fileName"
